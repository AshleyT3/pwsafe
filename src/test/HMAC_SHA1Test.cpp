/*
* Copyright (c) 2003-2023 Rony Shapiro <ronys@pwsafe.org>.
* All rights reserved. Use of the code is allowed under the
* Artistic License 2.0 terms, as specified in the LICENSE file
* distributed with this code, or available from
* http://www.opensource.org/licenses/artistic-license-2.0.php
*/
// HMAC_SHA1Test.cpp: Unit test for HMAC implementation with SHA1
// Test vectors from RFC4231.
// RFC4321 does not specify SHA1 expected results so the expected
// results used in this test were obtained using a non-pwsafe
// HMAC-SHA1 implementation on both Windows/Linux. That effort
// also validated the well-known HMAC-SHA256 expected test results
// from RFC4321 (and used by pwsafe) toward ensuring correctness
// of the derivation effort.

#ifdef WIN32
#include "../ui/Windows/stdafx.h"
#endif

#include "core/crypto/hmac.h"
#include "core/crypto/sha1.h"
#include "gtest/gtest.h"

TEST(HMAC_SHA1Test, hmac_sha1_test)
{
  static const unsigned char key1[] =
    {0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
     0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b};
  static const unsigned char data1[] =
    {0x48, 0x69, 0x20, 0x54, 0x68, 0x65, 0x72, 0x65};

  static const unsigned char key2[] =
    {0x4a, 0x65, 0x66, 0x65}; //                          ("Jefe")
  static const unsigned char data2[] =
    {0x77, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x20,
     0x79, 0x61, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20, //  ("what do ya want ")
     0x66, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x68,
     0x69, 0x6e, 0x67, 0x3f}; //          ("for nothing?")

  static const unsigned char key3[] =
    {0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
     0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
     0xaa, 0xaa, 0xaa, 0xaa,}; //                          (20 bytes)
  static const unsigned char data3[] =
    {0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
     0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
     0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
     0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
     0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
     0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
     0xdd, 0xdd,}; //                          (50 bytes)

  static const unsigned char key4[] =
    {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
     0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10,
     0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
     0x19,}; //                 (25 bytes)
  static const unsigned char data4[] =
    {0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
     0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
     0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
     0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
     0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
     0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
     0xcd, 0xcd, }; //                              (50 bytes)

  static const unsigned char key5[] =
    { 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
      0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
      0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
      0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
      0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
      0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
      0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
      0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
      0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
      0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
      0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
      0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
      0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
      0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
      0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
      0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
      0xaa, 0xaa, 0xaa,}; //                          (131 bytes)
  static const unsigned char data5[] =
    {0x54, 0x65, 0x73, 0x74, 0x20, 0x55, 0x73, 0x69,
     0x6e, 0x67, 0x20, 0x4c, 0x61, 0x72, 0x67, 0x65, //  ("Test Using Large")
     0x72, 0x20, 0x54, 0x68, 0x61, 0x6e, 0x20, 0x42,
     0x6c, 0x6f, 0x63, 0x6b, 0x2d, 0x53, 0x69, 0x7a, //  ("r Than Block-Siz")
     0x65, 0x20, 0x4b, 0x65, 0x79, 0x20, 0x2d, 0x20,
     0x48, 0x61, 0x73, 0x68, 0x20, 0x4b, 0x65, 0x79, //  ("e Key - Hash Key")
     0x20, 0x46, 0x69, 0x72, 0x73, 0x74, };//            (" First")

  static const unsigned char key6[] =
    {0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
     0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
     0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
     0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
     0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
     0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
     0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
     0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
     0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
     0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
     0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
     0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
     0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
     0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
     0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
     0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
     0xaa, 0xaa, 0xaa, }; //                            (131 bytes)
  static const unsigned char data6[] =
    {0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20,
     0x61, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x75, //  ("This is a test u")
     0x73, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x6c,
     0x61, 0x72, 0x67, 0x65, 0x72, 0x20, 0x74, 0x68, //  ("sing a larger th")
     0x61, 0x6e, 0x20, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
     0x2d, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x6b, 0x65, //  ("an block-size ke")
     0x79, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x20,
     0x6c, 0x61, 0x72, 0x67, 0x65, 0x72, 0x20, 0x74, //  ("y and a larger t")
     0x68, 0x61, 0x6e, 0x20, 0x62, 0x6c, 0x6f, 0x63,
     0x6b, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x64, //  ("han block-size d")
     0x61, 0x74, 0x61, 0x2e, 0x20, 0x54, 0x68, 0x65,
     0x20, 0x6b, 0x65, 0x79, 0x20, 0x6e, 0x65, 0x65, //  ("ata. The key nee")
     0x64, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65,
     0x20, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x20, //  ("ds to be hashed ")
     0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x62,
     0x65, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x73, 0x65, //  ("before being use")
     0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65,
     0x20, 0x48, 0x4d, 0x41, 0x43, 0x20, 0x61, 0x6c, //  ("d by the HMAC al")
     0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x2e, }; // ("gorithm.")

  static const struct {
    unsigned char *key;
    unsigned long keylen;
    unsigned char *data;
    unsigned long datalen;
    unsigned char hash[SHA1::HASHLEN];
  } tests[] = {
    { (unsigned char *)key1, 20,
      (unsigned char *)data1, 8,
      {0xb6, 0x17, 0x31, 0x86, 0x55, 0x05, 0x72, 0x64,
       0xe2, 0x8b, 0xc0, 0xb6, 0xfb, 0x37, 0x8c, 0x8e,
       0xf1, 0x46, 0xbe, 0x00, }
    },
    { (unsigned char *)key2, sizeof(key2),
      (unsigned char *)data2, sizeof(data2),

      {0xef, 0xfc, 0xdf, 0x6a, 0xe5, 0xeb, 0x2f, 0xa2,
       0xd2, 0x74, 0x16, 0xd5, 0xf1, 0x84, 0xdf, 0x9c,
       0x25, 0x9a, 0x7c, 0x79, }
    },
    { (unsigned char *)key3, 20,
      (unsigned char *)data3, 50,
      {0x12, 0x5d, 0x73, 0x42, 0xb9, 0xac, 0x11, 0xcd,
       0x91, 0xa3, 0x9a, 0xf4, 0x8a, 0xa1, 0x7b, 0x4f,
       0x63, 0xf1, 0x75, 0xd3, }
    },
    { (unsigned char *)key4, 25,
      (unsigned char *)data4, 50,
      {0x4c, 0x90, 0x07, 0xf4, 0x02, 0x62, 0x50, 0xc6,
       0xbc, 0x84, 0x14, 0xf9, 0xbf, 0x50, 0xc8, 0x6c,
       0x2d, 0x72, 0x35, 0xda, }
    },
    { (unsigned char *)key5, 131,
      (unsigned char *)data5, sizeof(data5),
      {0x90, 0xd0, 0xda, 0xce, 0x1c, 0x1b, 0xdc, 0x95,
       0x73, 0x39, 0x30, 0x78, 0x03, 0x16, 0x03, 0x35,
       0xbd, 0xe6, 0xdf, 0x2b, }
    },
    { (unsigned char *)key6, 131,
      (unsigned char *)data6, sizeof(data6),
      {0x21, 0x7e, 0x44, 0xbb, 0x08, 0xb6, 0xe0, 0x6a,
       0x2d, 0x6c, 0x30, 0xf3, 0xcb, 0x9f, 0x53, 0x7f,
       0x97, 0xc6, 0x33, 0x56, }
    }
  };

  size_t i;
  unsigned char tmp[SHA1::HASHLEN];
  for (i = 0; i < (sizeof(tests) / sizeof(tests[0])); i++) {
    // Direct type usage: HMAC<SHA1...>
    HMAC<SHA1, SHA1::HASHLEN, SHA1::BLOCKSIZE> md(tests[i].key, tests[i].keylen);
    md.Update(tests[i].data, tests[i].datalen);
    md.Final(tmp);
    EXPECT_TRUE(memcmp(tmp, tests[i].hash, SHA1::HASHLEN) == 0) << "HMAC<SHA1...> type: Test vector " << i;

    // Indirect type usage: HMAC_SHA1
    HMAC_SHA1 md2(tests[i].key, tests[i].keylen);
    md2.Update(tests[i].data, tests[i].datalen);
    md2.Final(tmp);
    EXPECT_TRUE(memcmp(tmp, tests[i].hash, SHA1::HASHLEN) == 0) << "HMAC_SHA1 type: Test vector " << i;
  }
}
